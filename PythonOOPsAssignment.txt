Q1. What is the purpose of Python's OOP?
Ans:- In Python, object-oriented Programming (OOPs) is a programming paradigm that uses objects and classes in programming.
It aims to implement real-world entities like inheritance, polymorphism, encapsulation, etc. in the programming.
- MAIN CONCEPTS OF OOPS ARE
1 - CLASS
2 - OBJECTS
3 - POLYMORPHISM
4 - ENCAPSULATION
5 - INHERITANCE 
6 - DATA ABSTRACTION

Q2. Where does an inheritance search look for an attribute?
Ans :- An inheritance search looks for an attribute first in the instance object, then in the class the instance was created from,
then in all higher superclasses, progressing from left to right (by default). The search stops at the first place the attribute is found.

Q3. How do you distinguish between a class object and an instance object?
Ans :- Python is an object oriented programming language. Almost everything in Python is an object, with its properties and methods.
A Class is like an object constructor, or a "blueprint" for creating objects.
Instance is an object that belongs to a class. For instance, list is a class in Python. When we create a list,
we have an instance of the list class. In this article, I will focus on class and instance variables.

Q4. What makes the first argument in a class’s method function special?
Ans :- Self is the first argument to be passed in Constructor and Instance Method. Self must be provided as a First parameter to the Instance method and constructor.
If you don't provide it, it will cause an error.

Q5. What is the purpose of the init method?
Ans :- The __init__ method lets the class initialize the object’s attributes and serves no other purpose. It is only used within classes. 

Q6. What is the process for creating a class instance?
Ans :-To create instances of a class, you call the class using class name and pass in whatever arguments its __init__ method accepts.


Q7. What is the process for creating a class?
Ans :-Create a class named Car, with a property named wheel:
class Car:
  wheel = 4

Q8. How would you define the superclasses of a class?
Ans :-A superclass is the class from which many subclasses can be created. The subclasses inherit the characteristics of a superclass.
The superclass is also known as the parent class or base class.

Q9. What is the relationship between classes and modules?
Ans :-Classes are blueprints that allow you to create instances with attributes and bound functionality. Classes support inheritance, metaclasses, and descriptors.
Modules can't do any of this, modules are essentially singleton instances of an internal module class, and all their globals are attributes on the module instance.

Q10. How do you make instances and classes?
Ans :-Create a class named Car, with a property named wheel:
class Car:
  wheel = 4
To create instances of a class, you call the class using class name and pass in whatever arguments its __init__ method accepts.

Q11. Where and how should be class attributes created?
Ans :-Class attributes are the variables defined directly in the class that are shared by all objects of the class.

Q12. Where and how are instance attributes created?
Ans :-instance attributes, which are defined in the __init__() function, are class variables that allow us to define different values for each object of a class.


Q13. What does the term "self" in a Python class mean?
Ans :-The self parameter is a reference to the current instance of the class, and is used to access variables that belongs to the class.


Q14. How does a Python class handle operator overloading?
Ans :-The operator overloading in Python means provide extended meaning beyond their predefined operational meaning. Such as,
we use the "+" operator for adding two integers as well as joining two strings or merging two lists.
We can achieve this as the "+" operator is overloaded by the "int" class and "str" class.

Q15. When do you consider allowing operator overloading of your classes?
Ans :-Consider that we have two objects which are a physical representation of a class (user-defined data type) and we have to add two objects with binary '+' operator it throws an error,
because compiler don't know how to add two objects. So we define a method for an operator and that process is called operator overloading.

Q16. What is the most popular form of operator overloading?
Ans :-A very popular and convenient example is the Addition (+) operator. Just think how the '+' operator operates on two numbers and the same operator operates on two strings.
It performs “Addition” on numbers whereas it performs “Concatenation” on strings.

Q17. What are the two most important concepts to grasp in order to comprehend Python OOP code?
Ans :-Both inheritance and polymorphism are fundamental concepts of object oriented programming.
These concepts help us to create code that can be extended and easily maintainable.

Q18. Describe three applications for exception processing.
Ans :-There are mainly three kinds of distinguishable errors in Python: syntax errors, exceptions and logical errors.


Q19. What happens if you don't do something extra to treat an exception?
Ans :-if you don't handle exceptions, When an exception occurred, if you don't handle it,
the program terminates abruptly and the code past the line that caused the exception will not get executed.

Q20. What are your options for recovering from an exception in your script?
Ans :-You can also provide a generic except clause, which handles any exception. After the except clause(s), you can include an else-clause.
The code in the else-block executes if the code in the try: block does not raise an exception.
The else-block is a good place for code that does not need the try: block's protection.

Q21. Describe two methods for triggering exceptions in your script.
Ans :-To avoid such a scenario, there are two methods to handle Python exceptions: Try – This method catches the exceptions raised by the program.
Raise – Triggers an exception manually using custom exceptions.

Q22. Identify two methods for specifying actions to be executed at termination time, regardless of
whether or not an exception exists.
Ans :-The finally Clause
This clause is meant to define clean-up actions that must be performed regardless of whether an exception was raised or not.
A finally clause must always be executed before leaving the try/except statement, whether an exception has occurred or not.

Q23. What is the purpose of the try statement?
Ans :-The try block lets you test a block of code for errors. The except block lets you handle the error.
The else block lets you execute code when there is no error.

Q24. What are the two most popular try statement variations?
Ans :- 1. Try/Except/Else
	 2.Try/Except/Finally

Q25. What is the purpose of the raise statement?
Ans :-The raise keyword is used to raise an exception. You can define what kind of error to raise, and the text to print to the user.

Q26. What does the assert statement do, and what other statement is it like?
Ans :-The assert keyword is used when debugging code. The assert keyword lets you test if a condition in your code returns True,
if not, the program will raise an AssertionError.

Q27. What is the purpose of the with/as argument, and what other statement is it like?
Ans :-Thus, with statement helps avoiding bugs and leaks by ensuring that a resource is properly released when the code using the resource is completely executed.
The with statement is popularly used with file streams, as shown above and with Locks, sockets, subprocesses and telnets etc.

Q28. What are *args, **kwargs?
Ans :-*args specifies the number of non-keyworded arguments that can be passed and the operations that can be performed on the function in Python whereas,
**kwargs is a variable number of keyworded arguments that can be passed to a function that can perform dictionary operations.

Q29. How can I pass optional or keyword parameters from one function to another?
Ans :-Users can either pass their values or can pretend the function to use theirs default values which are specified. In this way,
the user can call the function by either passing those optional parameters or just passing the required parameters.
Without using keyword arguments. By using keyword arguments.

Q30. What are Lambda Functions?
Ans :-A lambda function is a small anonymous function. A lambda function can take any number of arguments, but can only have one expression.


Q31. Explain Inheritance in Python with an example?
Ans :-Inheritance is a mechanism in which one class acquires the property of another class. For example,
a child inherits the traits of his/her parents. With inheritance, we can reuse the fields and methods of the existing class.
Hence, inheritance facilitates Reusability and is an important concept of OOPs.

Q32. Suppose class C inherits from classes A and B as class C(A,B).Classes A and B both have their own versions of method func(). If we call func() from an object of class C, which version gets invoked?
Ans :-

Q33. Which methods/functions do we use to determine the type of instance and inheritance?
Ans :-Use isinstance() to check an instance's type: isinstance(obj, int) will be True only if obj.__class__ is int or some class derived from int .
Use issubclass() to check class inheritance: issubclass(bool, int) is True since bool is a subclass of int .

Q34.Explain the use of the 'nonlocal' keyword in Python.
Ans :-The nonlocal keyword is used to work with variables inside nested functions, where the variable should not belong to the inner function.
Use the keyword nonlocal to declare that the variable is not local.

Q35. What is the global keyword?
Ans :-The global keyword is used to create global variables from a no-global scope, e.g. inside a function.

